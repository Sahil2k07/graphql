package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/Sahil2k07/graphql/internal/graphql/generated"
	"github.com/Sahil2k07/graphql/internal/utils"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input generated.SignupInput) (string, error) {
	resp, err := r.AuthService.Signup(ctx, input)
	if err != nil {
		return "", utils.HandleGraphQLError(ctx, err)
	}
	return resp, nil
}

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, input generated.SigninInput) (*generated.AuthPayload, error) {
	resp, err := r.AuthService.Signin(ctx, input)
	if err != nil {
		return nil, utils.HandleGraphQLError(ctx, err)
	}
	return resp, nil
}

// ForgotPassword is the resolver for the forgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, input generated.ForgotPasswordInput) (string, error) {
	resp, err := r.AuthService.ForgotPassword(ctx, input)
	if err != nil {
		return "", utils.HandleGraphQLError(ctx, err)
	}
	return resp, nil
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input generated.ResetPasswordInput) (string, error) {
	resp, err := r.AuthService.ResetPassword(ctx, input)
	if err != nil {
		return "", utils.HandleGraphQLError(ctx, err)
	}
	return resp, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*generated.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}
